# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.parameter import Parameter
from openapi_server.models.view import View
from openapi_server import util

from openapi_server.models.parameter import Parameter  # noqa: E501
from openapi_server.models.view import View  # noqa: E501

class Graph(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, graph_id=None, parameters=None, views=None, default_view=None):  # noqa: E501
        """Graph - a model defined in OpenAPI

        :param graph_id: The graph_id of this Graph.  # noqa: E501
        :type graph_id: int
        :param parameters: The parameters of this Graph.  # noqa: E501
        :type parameters: List[Parameter]
        :param views: The views of this Graph.  # noqa: E501
        :type views: List[View]
        :param default_view: The default_view of this Graph.  # noqa: E501
        :type default_view: int
        """
        self.openapi_types = {
            'graph_id': int,
            'parameters': List[Parameter],
            'views': List[View],
            'default_view': int
        }

        self.attribute_map = {
            'graph_id': 'graphID',
            'parameters': 'parameters',
            'views': 'views',
            'default_view': 'defaultView'
        }

        self._graph_id = graph_id
        self._parameters = parameters
        self._views = views
        self._default_view = default_view

    @classmethod
    def from_dict(cls, dikt) -> 'Graph':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Graph of this Graph.  # noqa: E501
        :rtype: Graph
        """
        return util.deserialize_model(dikt, cls)

    @property
    def graph_id(self):
        """Gets the graph_id of this Graph.


        :return: The graph_id of this Graph.
        :rtype: int
        """
        return self._graph_id

    @graph_id.setter
    def graph_id(self, graph_id):
        """Sets the graph_id of this Graph.


        :param graph_id: The graph_id of this Graph.
        :type graph_id: int
        """
        if graph_id is None:
            raise ValueError("Invalid value for `graph_id`, must not be `None`")  # noqa: E501

        self._graph_id = graph_id

    @property
    def parameters(self):
        """Gets the parameters of this Graph.

        The global parameters of the graph  # noqa: E501

        :return: The parameters of this Graph.
        :rtype: List[Parameter]
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this Graph.

        The global parameters of the graph  # noqa: E501

        :param parameters: The parameters of this Graph.
        :type parameters: List[Parameter]
        """

        self._parameters = parameters

    @property
    def views(self):
        """Gets the views of this Graph.


        :return: The views of this Graph.
        :rtype: List[View]
        """
        return self._views

    @views.setter
    def views(self, views):
        """Sets the views of this Graph.


        :param views: The views of this Graph.
        :type views: List[View]
        """

        self._views = views

    @property
    def default_view(self):
        """Gets the default_view of this Graph.

        The unique identifier of the default view  # noqa: E501

        :return: The default_view of this Graph.
        :rtype: int
        """
        return self._default_view

    @default_view.setter
    def default_view(self, default_view):
        """Sets the default_view of this Graph.

        The unique identifier of the default view  # noqa: E501

        :param default_view: The default_view of this Graph.
        :type default_view: int
        """

        self._default_view = default_view
