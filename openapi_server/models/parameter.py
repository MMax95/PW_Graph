# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class Parameter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, parameter_id=None, parameter_name=None, parameter_type=None, parameter_value=None):  # noqa: E501
        """Parameter - a model defined in OpenAPI

        :param parameter_id: The parameter_id of this Parameter.  # noqa: E501
        :type parameter_id: int
        :param parameter_name: The parameter_name of this Parameter.  # noqa: E501
        :type parameter_name: str
        :param parameter_type: The parameter_type of this Parameter.  # noqa: E501
        :type parameter_type: str
        :param parameter_value: The parameter_value of this Parameter.  # noqa: E501
        :type parameter_value: str
        """
        self.openapi_types = {
            'parameter_id': int,
            'parameter_name': str,
            'parameter_type': str,
            'parameter_value': str
        }

        self.attribute_map = {
            'parameter_id': 'parameterID',
            'parameter_name': 'parameterName',
            'parameter_type': 'parameterType',
            'parameter_value': 'parameterValue'
        }

        self._parameter_id = parameter_id
        self._parameter_name = parameter_name
        self._parameter_type = parameter_type
        self._parameter_value = parameter_value

    @classmethod
    def from_dict(cls, dikt) -> 'Parameter':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Parameter of this Parameter.  # noqa: E501
        :rtype: Parameter
        """
        return util.deserialize_model(dikt, cls)

    @property
    def parameter_id(self):
        """Gets the parameter_id of this Parameter.

        Unique parameter identifier  # noqa: E501

        :return: The parameter_id of this Parameter.
        :rtype: int
        """
        return self._parameter_id

    @parameter_id.setter
    def parameter_id(self, parameter_id):
        """Sets the parameter_id of this Parameter.

        Unique parameter identifier  # noqa: E501

        :param parameter_id: The parameter_id of this Parameter.
        :type parameter_id: int
        """
        if parameter_id is None:
            raise ValueError("Invalid value for `parameter_id`, must not be `None`")  # noqa: E501

        self._parameter_id = parameter_id

    @property
    def parameter_name(self):
        """Gets the parameter_name of this Parameter.


        :return: The parameter_name of this Parameter.
        :rtype: str
        """
        return self._parameter_name

    @parameter_name.setter
    def parameter_name(self, parameter_name):
        """Sets the parameter_name of this Parameter.


        :param parameter_name: The parameter_name of this Parameter.
        :type parameter_name: str
        """

        self._parameter_name = parameter_name

    @property
    def parameter_type(self):
        """Gets the parameter_type of this Parameter.


        :return: The parameter_type of this Parameter.
        :rtype: str
        """
        return self._parameter_type

    @parameter_type.setter
    def parameter_type(self, parameter_type):
        """Sets the parameter_type of this Parameter.


        :param parameter_type: The parameter_type of this Parameter.
        :type parameter_type: str
        """
        allowed_values = ["integer", "string", "boolean", "valueArray", "numericalPair"]  # noqa: E501
        if parameter_type not in allowed_values:
            raise ValueError(
                "Invalid value for `parameter_type` ({0}), must be one of {1}"
                .format(parameter_type, allowed_values)
            )

        self._parameter_type = parameter_type

    @property
    def parameter_value(self):
        """Gets the parameter_value of this Parameter.

        The string to be cast into appropriate value type  # noqa: E501

        :return: The parameter_value of this Parameter.
        :rtype: str
        """
        return self._parameter_value

    @parameter_value.setter
    def parameter_value(self, parameter_value):
        """Sets the parameter_value of this Parameter.

        The string to be cast into appropriate value type  # noqa: E501

        :param parameter_value: The parameter_value of this Parameter.
        :type parameter_value: str
        """

        self._parameter_value = parameter_value
