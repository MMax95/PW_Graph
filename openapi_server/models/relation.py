# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.action import Action
from openapi_server.models.parameter import Parameter
from openapi_server.models.trigger import Trigger
from openapi_server import util

from openapi_server.models.action import Action  # noqa: E501
from openapi_server.models.parameter import Parameter  # noqa: E501
from openapi_server.models.trigger import Trigger  # noqa: E501

class Relation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, relation_id=None, triggers=None, actions=None, internal_parameters=None):  # noqa: E501
        """Relation - a model defined in OpenAPI

        :param relation_id: The relation_id of this Relation.  # noqa: E501
        :type relation_id: int
        :param triggers: The triggers of this Relation.  # noqa: E501
        :type triggers: List[Trigger]
        :param actions: The actions of this Relation.  # noqa: E501
        :type actions: List[Action]
        :param internal_parameters: The internal_parameters of this Relation.  # noqa: E501
        :type internal_parameters: List[Parameter]
        """
        self.openapi_types = {
            'relation_id': int,
            'triggers': List[Trigger],
            'actions': List[Action],
            'internal_parameters': List[Parameter]
        }

        self.attribute_map = {
            'relation_id': 'relationID',
            'triggers': 'triggers',
            'actions': 'actions',
            'internal_parameters': 'internalParameters'
        }

        self._relation_id = relation_id
        self._triggers = triggers
        self._actions = actions
        self._internal_parameters = internal_parameters

    @classmethod
    def from_dict(cls, dikt) -> 'Relation':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Relation of this Relation.  # noqa: E501
        :rtype: Relation
        """
        return util.deserialize_model(dikt, cls)

    @property
    def relation_id(self):
        """Gets the relation_id of this Relation.


        :return: The relation_id of this Relation.
        :rtype: int
        """
        return self._relation_id

    @relation_id.setter
    def relation_id(self, relation_id):
        """Sets the relation_id of this Relation.


        :param relation_id: The relation_id of this Relation.
        :type relation_id: int
        """
        if relation_id is None:
            raise ValueError("Invalid value for `relation_id`, must not be `None`")  # noqa: E501

        self._relation_id = relation_id

    @property
    def triggers(self):
        """Gets the triggers of this Relation.

        The triggers used by the relation  # noqa: E501

        :return: The triggers of this Relation.
        :rtype: List[Trigger]
        """
        return self._triggers

    @triggers.setter
    def triggers(self, triggers):
        """Sets the triggers of this Relation.

        The triggers used by the relation  # noqa: E501

        :param triggers: The triggers of this Relation.
        :type triggers: List[Trigger]
        """

        self._triggers = triggers

    @property
    def actions(self):
        """Gets the actions of this Relation.

        The actions used by the relation  # noqa: E501

        :return: The actions of this Relation.
        :rtype: List[Action]
        """
        return self._actions

    @actions.setter
    def actions(self, actions):
        """Sets the actions of this Relation.

        The actions used by the relation  # noqa: E501

        :param actions: The actions of this Relation.
        :type actions: List[Action]
        """

        self._actions = actions

    @property
    def internal_parameters(self):
        """Gets the internal_parameters of this Relation.


        :return: The internal_parameters of this Relation.
        :rtype: List[Parameter]
        """
        return self._internal_parameters

    @internal_parameters.setter
    def internal_parameters(self, internal_parameters):
        """Sets the internal_parameters of this Relation.


        :param internal_parameters: The internal_parameters of this Relation.
        :type internal_parameters: List[Parameter]
        """

        self._internal_parameters = internal_parameters
