# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.parameter import Parameter
from openapi_server.models.relation import Relation
from openapi_server import util

from openapi_server.models.parameter import Parameter  # noqa: E501
from openapi_server.models.relation import Relation  # noqa: E501

class Node(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, node_id=None, status='Pending', parameters=None, relations=None):  # noqa: E501
        """Node - a model defined in OpenAPI

        :param node_id: The node_id of this Node.  # noqa: E501
        :type node_id: int
        :param status: The status of this Node.  # noqa: E501
        :type status: str
        :param parameters: The parameters of this Node.  # noqa: E501
        :type parameters: List[Parameter]
        :param relations: The relations of this Node.  # noqa: E501
        :type relations: List[Relation]
        """
        self.openapi_types = {
            'node_id': int,
            'status': str,
            'parameters': List[Parameter],
            'relations': List[Relation]
        }

        self.attribute_map = {
            'node_id': 'nodeID',
            'status': 'status',
            'parameters': 'parameters',
            'relations': 'relations'
        }

        self._node_id = node_id
        self._status = status
        self._parameters = parameters
        self._relations = relations

    @classmethod
    def from_dict(cls, dikt) -> 'Node':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Node of this Node.  # noqa: E501
        :rtype: Node
        """
        return util.deserialize_model(dikt, cls)

    @property
    def node_id(self):
        """Gets the node_id of this Node.


        :return: The node_id of this Node.
        :rtype: int
        """
        return self._node_id

    @node_id.setter
    def node_id(self, node_id):
        """Sets the node_id of this Node.


        :param node_id: The node_id of this Node.
        :type node_id: int
        """
        if node_id is None:
            raise ValueError("Invalid value for `node_id`, must not be `None`")  # noqa: E501

        self._node_id = node_id

    @property
    def status(self):
        """Gets the status of this Node.

        Node status  # noqa: E501

        :return: The status of this Node.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Node.

        Node status  # noqa: E501

        :param status: The status of this Node.
        :type status: str
        """
        allowed_values = ["Pending", "Complete", "Failed"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def parameters(self):
        """Gets the parameters of this Node.

        Node internal parameters  # noqa: E501

        :return: The parameters of this Node.
        :rtype: List[Parameter]
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this Node.

        Node internal parameters  # noqa: E501

        :param parameters: The parameters of this Node.
        :type parameters: List[Parameter]
        """

        self._parameters = parameters

    @property
    def relations(self):
        """Gets the relations of this Node.


        :return: The relations of this Node.
        :rtype: List[Relation]
        """
        return self._relations

    @relations.setter
    def relations(self, relations):
        """Sets the relations of this Node.


        :param relations: The relations of this Node.
        :type relations: List[Relation]
        """

        self._relations = relations
