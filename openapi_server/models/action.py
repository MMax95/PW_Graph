# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class Action(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, action_type=None, source_parameter_id=None, target_parameter_id=None):  # noqa: E501
        """Action - a model defined in OpenAPI

        :param action_type: The action_type of this Action.  # noqa: E501
        :type action_type: str
        :param source_parameter_id: The source_parameter_id of this Action.  # noqa: E501
        :type source_parameter_id: int
        :param target_parameter_id: The target_parameter_id of this Action.  # noqa: E501
        :type target_parameter_id: int
        """
        self.openapi_types = {
            'action_type': str,
            'source_parameter_id': int,
            'target_parameter_id': int
        }

        self.attribute_map = {
            'action_type': 'actionType',
            'source_parameter_id': 'sourceParameterID',
            'target_parameter_id': 'targetParameterID'
        }

        self._action_type = action_type
        self._source_parameter_id = source_parameter_id
        self._target_parameter_id = target_parameter_id

    @classmethod
    def from_dict(cls, dikt) -> 'Action':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Action of this Action.  # noqa: E501
        :rtype: Action
        """
        return util.deserialize_model(dikt, cls)

    @property
    def action_type(self):
        """Gets the action_type of this Action.

        Action type  # noqa: E501

        :return: The action_type of this Action.
        :rtype: str
        """
        return self._action_type

    @action_type.setter
    def action_type(self, action_type):
        """Sets the action_type of this Action.

        Action type  # noqa: E501

        :param action_type: The action_type of this Action.
        :type action_type: str
        """
        allowed_values = ["modifyTarget", "switchTargetState", "addToTarget", "subtractFromTarget", "multiplyTarget", "divideTarget"]  # noqa: E501
        if action_type not in allowed_values:
            raise ValueError(
                "Invalid value for `action_type` ({0}), must be one of {1}"
                .format(action_type, allowed_values)
            )

        self._action_type = action_type

    @property
    def source_parameter_id(self):
        """Gets the source_parameter_id of this Action.


        :return: The source_parameter_id of this Action.
        :rtype: int
        """
        return self._source_parameter_id

    @source_parameter_id.setter
    def source_parameter_id(self, source_parameter_id):
        """Sets the source_parameter_id of this Action.


        :param source_parameter_id: The source_parameter_id of this Action.
        :type source_parameter_id: int
        """
        if source_parameter_id is None:
            raise ValueError("Invalid value for `source_parameter_id`, must not be `None`")  # noqa: E501

        self._source_parameter_id = source_parameter_id

    @property
    def target_parameter_id(self):
        """Gets the target_parameter_id of this Action.


        :return: The target_parameter_id of this Action.
        :rtype: int
        """
        return self._target_parameter_id

    @target_parameter_id.setter
    def target_parameter_id(self, target_parameter_id):
        """Sets the target_parameter_id of this Action.


        :param target_parameter_id: The target_parameter_id of this Action.
        :type target_parameter_id: int
        """
        if target_parameter_id is None:
            raise ValueError("Invalid value for `target_parameter_id`, must not be `None`")  # noqa: E501

        self._target_parameter_id = target_parameter_id
